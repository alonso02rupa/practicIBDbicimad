version: '3.8'

services:
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  mc-init:
    image: minio/mc
    depends_on:
      - minio
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin; do
        echo 'Waiting for MinIO to be ready...'
        sleep 1
      done;
      /usr/bin/mc mb minio/raw-ingestion-zone || true;
      /usr/bin/mc mb minio/process-zone || true;
      /usr/bin/mc mb minio/access-zone || true;
      /usr/bin/mc mb minio/govern-zone || true;
      /usr/bin/mc mb minio/govern-zone-metadata || true;
      /usr/bin/mc mb minio/govern-zone-security || true;
      echo 'MinIO buckets created successfully'
      exit 0;
      "
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 40s
    networks:
      - app-network

  trino:
    image: trinodb/trino:403
    container_name: trino
    ports:
      - "8085:8080"
    volumes:
      - ./config/trino/:/etc/trino/
    depends_on:
      - minio
      - postgres
    networks:
      - app-network

  python-client:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python-client
    volumes:
      - ./scripts:/scripts
      - ./data:/data
    depends_on:
      - postgres
      - trino
      - minio
    networks:
      - app-network
    entrypoint: |
      /bin/bash -c "
      # Esperar a que PostgreSQL est√© listo
      until pg_isready -h postgres -U postgres; do
        echo 'Waiting for PostgreSQL to be ready...'
        sleep 2
      done;
      # Ejecutar los tres archivos Python
      python /scripts/01_ingest_data.py;
      python /scripts/02_proccess_data.py;
      python /scripts/03_access_zone.py;
      "

  superset:
    image: apache/superset:2.1.0
    container_name: superset
    environment:
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@postgres:5432/postgres
      - REDIS_URL=redis://superset-redis:6379/0
      - SUPERSET_SECRET_KEY=mysecretkey
      - FLASK_APP=superset.app
      - FLASK_ENV=production
      - SUPERSET_LOAD_EXAMPLES=no
    ports:
      - "8088:8088"
    depends_on:
      - postgres
      - superset-redis
    networks:
      - app-network
    volumes:
      - superset_home:/app/superset_home

  superset-redis:
    image: redis:alpine
    container_name: superset-redis
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  minio_data:
  postgres_data:
  superset_home:
